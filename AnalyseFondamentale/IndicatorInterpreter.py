from AnalyseFondamentale.Utils import Utils

class IndicatorInterpreter:
    """
    Classe d√©di√©e √† l'interpr√©tation des indicateurs fondamentaux par secteur.
    Fournit pour chaque indicateur :
    - une note sur 10
    - une interpr√©tation qualitative sp√©cifique au secteur
    """

    # --- Rentabilit√© ---
    @staticmethod
    def interpret_roe(roe, sector="General"):
        if roe is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        # --- Technology ---
        if sector_group == "Technology":
            if roe > 0.25: return 10, "ROE exceptionnel pour la tech - cr√©ation de valeur majeure üíé"
            elif roe > 0.18: return 9, "Excellente rentabilit√© tech - largement au-dessus du co√ªt du capital üöÄ"
            elif roe > 0.13: return 8, "Bonne rentabilit√© pour le secteur ‚úÖ"
            elif roe > 0.09: return 7, "Rentabilit√© correcte üëç"
            elif roe > 0.05: return 6, "Rentabilit√© faible - cr√©ation de valeur limit√©e ‚ö†Ô∏è"
            elif roe > 0: return 4, "Rentabilit√© tr√®s faible - pr√©occupant üî¥"
            return 2, "Rentabilit√© n√©gative - destruction de valeur üö®"

        # --- Financial Services ---
        elif sector_group == "Financial Services":
            if roe > 0.18: return 10, "ROE exceptionnel pour le secteur financier üíé"
            elif roe > 0.14: return 9, "Excellente rentabilit√© bancaire üöÄ"
            elif roe > 0.10: return 8, "Bonne rentabilit√© financi√®re ‚úÖ"
            elif roe > 0.07: return 7, "Rentabilit√© correcte pour une banque üëç"
            elif roe > 0.04: return 6, "Rentabilit√© faible üìä"
            elif roe > 0: return 4, "Rentabilit√© tr√®s faible üî¥"
            return 1, "Rentabilit√© n√©gative - critique üö®"

        # --- Healthcare ---
        elif sector_group == "Healthcare":
            if roe > 0.20: return 10, "ROE exceptionnel pour la sant√© üíé"
            elif roe > 0.15: return 9, "Excellente rentabilit√© pharma üöÄ"
            elif roe > 0.11: return 8, "Bonne rentabilit√© sant√© ‚úÖ"
            elif roe > 0.07: return 7, "Rentabilit√© correcte üëç"
            elif roe > 0.04: return 6, "Rentabilit√© faible üìä"
            elif roe > 0: return 4, "Rentabilit√© tr√®s faible üî¥"
            return 2, "Rentabilit√© n√©gative - R&D non rentable üö®"

        # --- Energy ---
        elif sector_group == "Energy":
            if roe > 0.18: return 10, "ROE exceptionnel pour l'√©nergie üíé"
            elif roe > 0.14: return 9, "Excellente rentabilit√© √©nergie üöÄ"
            elif roe > 0.10: return 8, "Bonne rentabilit√© ‚úÖ"
            elif roe > 0.06: return 7, "Rentabilit√© correcte üëç"
            elif roe > 0.03: return 6, "Rentabilit√© faible ‚ö†Ô∏è"
            elif roe > 0: return 4, "Rentabilit√© tr√®s faible üî¥"
            return 2, "Rentabilit√© n√©gative - cycle bas ou inefficacit√©s üö®"

        # --- General / autres secteurs ---
        else:
            if roe > 0.25: return 10, "Exceptionnel - cr√©ation de valeur majeure üíé"
            elif roe > 0.20: return 9, "Excellente rentabilit√© üöÄ"
            elif roe > 0.15: return 8, "Tr√®s bonne rentabilit√© ‚úÖ"
            elif roe > 0.12: return 7, "Bonne rentabilit√© üëç"
            elif roe > 0.08: return 6, "Rentabilit√© correcte üìä"
            elif roe > 0.05: return 5, "Rentabilit√© moyenne üòê"
            elif roe > 0.02: return 4, "Rentabilit√© faible ‚¨áÔ∏è"
            elif roe > 0: return 3, "Rentabilit√© tr√®s faible ‚ö†Ô∏è"
            return 1, "Rentabilit√© n√©gative - destruction de valeur üî¥"

    @staticmethod
    def interpret_roa(roa, sector="General"):
        if roa is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        # --- Financial Services ---
        if sector_group == "Financial Services":
            if roa > 0.015: return 10, "ROA exceptionnel pour une banque üíé"
            elif roa > 0.012: return 9, "Excellente utilisation des actifs üöÄ"
            elif roa > 0.009: return 8, "Bonne efficacit√© bancaire ‚úÖ"
            elif roa > 0.006: return 7, "Efficacit√© correcte üëç"
            elif roa > 0.004: return 6, "Efficacit√© moyenne üìä"
            elif roa > 0.002: return 5, "Efficacit√© faible ‚ö†Ô∏è"
            elif roa > 0: return 4, "Efficacit√© tr√®s faible üî¥"
            return 2, "ROA n√©gatif - probl√®me s√©rieux üö®"

        # --- Technology ---
        elif sector_group == "Technology":
            if roa > 0.15: return 10, "Utilisation exceptionnelle des actifs tech üíé"
            elif roa > 0.11: return 9, "Excellente efficacit√© tech üöÄ"
            elif roa > 0.08: return 8, "Bonne utilisation des actifs ‚úÖ"
            elif roa > 0.05: return 7, "Efficacit√© correcte üëç"
            elif roa > 0.03: return 6, "Efficacit√© moyenne üìä"
            elif roa > 0.01: return 5, "Efficacit√© faible ‚ö†Ô∏è"
            elif roa > 0: return 4, "Efficacit√© tr√®s faible üî¥"
            return 2, "Efficacit√© n√©gative - actifs mal utilis√©s üö®"

        # --- Healthcare ---
        elif sector_group == "Healthcare":
            if roa > 0.12: return 10, "ROA exceptionnel pour la sant√© üíé"
            elif roa > 0.09: return 9, "Excellente efficacit√© R&D üöÄ"
            elif roa > 0.07: return 8, "Bonne utilisation des actifs ‚úÖ"
            elif roa > 0.05: return 7, "Efficacit√© correcte üëç"
            elif roa > 0.03: return 6, "Efficacit√© moyenne üìä"
            elif roa > 0.01: return 5, "Efficacit√© faible ‚ö†Ô∏è"
            elif roa > 0: return 4, "Efficacit√© tr√®s faible üî¥"
            return 2, "ROA n√©gatif - mauvaise allocation üö®"

        # --- Energy ---
        elif sector_group == "Energy":
            if roa > 0.13: return 10, "ROA exceptionnel pour l'√©nergie üíé"
            elif roa > 0.10: return 9, "Excellente utilisation des actifs üöÄ"
            elif roa > 0.07: return 8, "Bonne efficacit√© ‚úÖ"
            elif roa > 0.05: return 7, "Efficacit√© correcte üëç"
            elif roa > 0.03: return 6, "Efficacit√© moyenne üìä"
            elif roa > 0.01: return 5, "Efficacit√© faible ‚ö†Ô∏è"
            elif roa > 0: return 4, "Efficacit√© tr√®s faible üî¥"
            return 2, "ROA n√©gatif - inefficacit√©s majeures üö®"

        # --- General / autres secteurs ---
        else:
            if roa > 0.15: return 10, "Utilisation des actifs exceptionnelle üíé"
            elif roa > 0.12: return 9, "Excellente efficacit√© üöÄ"
            elif roa > 0.09: return 8, "Tr√®s bonne utilisation ‚úÖ"
            elif roa > 0.06: return 7, "Bonne efficacit√© üëç"
            elif roa > 0.04: return 6, "Utilisation correcte üìä"
            elif roa > 0.02: return 5, "Utilisation moyenne üòê"
            elif roa > 0.01: return 4, "Utilisation faible ‚¨áÔ∏è"
            elif roa > 0: return 3, "Utilisation tr√®s faible ‚ö†Ô∏è"
            return 1, "Utilisation n√©gative - destruction de valeur üî¥"


    # --- Valorisation ---
    @staticmethod
    def interpret_forward_pe(forward_pe, sector="General"):
        if forward_pe is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        # --- Technology & Healthcare ---
        if sector_group in ["Technology", "Healthcare"]:
            if forward_pe < 12: return 10, "Exceptionnellement attractif pour la croissance üíé"
            elif forward_pe < 18: return 9, "Tr√®s attractif üöÄ"
            elif forward_pe < 25: return 8, "Attractif pour le secteur ‚úÖ"
            elif forward_pe < 35: return 7, "Correct pour une entreprise de croissance üëç"
            elif forward_pe < 45: return 6, "L√©g√®rement √©lev√© üìä"
            elif forward_pe < 60: return 5, "√âlev√© mais justifiable üòê"
            elif forward_pe < 80: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif forward_pe < 120: return 3, "Excessif üî¥"
            return 1, "Bullesque üíÄ"

        # --- Financial Services, Energy, Real Estate ---
        elif sector_group in ["Financial Services", "Energy", "Real Estate"]:
            if forward_pe < 5: return 10, "Exceptionnellement attractif üíé"
            elif forward_pe < 7: return 9, "Tr√®s attractif üöÄ"
            elif forward_pe < 10: return 8, "Attractif ‚úÖ"
            elif forward_pe < 13: return 7, "Correct üëç"
            elif forward_pe < 18: return 6, "L√©g√®rement √©lev√© üìä"
            elif forward_pe < 22: return 5, "√âlev√© pour le secteur üòê"
            elif forward_pe < 30: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif forward_pe < 45: return 3, "Excessif üî¥"
            return 1, "Extr√™mement excessif üíÄ"

        # --- General / autres secteurs ---
        else:
            if forward_pe < 7: return 10, "Exceptionnellement attractif üíé"
            elif forward_pe < 10: return 9, "Tr√®s attractif üöÄ"
            elif forward_pe < 14: return 8, "Attractif ‚úÖ"
            elif forward_pe < 18: return 7, "L√©g√®rement attractif üëç"
            elif forward_pe < 22: return 6, "Correct üìä"
            elif forward_pe < 28: return 5, "L√©g√®rement √©lev√© üòê"
            elif forward_pe < 35: return 4, "√âlev√© ‚ö†Ô∏è"
            elif forward_pe < 45: return 3, "Tr√®s √©lev√© üö®"
            elif forward_pe < 60: return 2, "Excessif üî¥"
            return 1, "Extr√™mement excessif üíÄ"

    @staticmethod
    def interpret_trailing_pe(trailing_pe, sector="General"):
        if trailing_pe is None:
            return 4, "Donn√©es indisponibles"
            
        sector_group = Utils._get_sector_group(sector)

        # --- Technology & Healthcare ---
        if sector_group in ["Technology", "Healthcare"]:
            if trailing_pe < 15: return 10, "Exceptionnel pour le secteur üíé"
            elif trailing_pe < 20: return 9, "Tr√®s attractif üöÄ"
            elif trailing_pe < 28: return 8, "Attractif ‚úÖ"
            elif trailing_pe < 36: return 7, "Correct üëç"
            elif trailing_pe < 46: return 6, "L√©g√®rement √©lev√© üìä"
            elif trailing_pe < 60: return 5, "√âlev√© üòê"
            elif trailing_pe < 75: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif trailing_pe < 100: return 3, "Excessif üî¥"
            else: return 1, "Extr√™mement excessif üíÄ"

        # --- Financial Services, Energy, Real Estate ---
        elif sector_group in ["Financial Services", "Energy", "Real Estate"]:
            if trailing_pe < 5: return 10, "Exceptionnel üíé"
            elif trailing_pe < 8: return 9, "Tr√®s attractif üöÄ"
            elif trailing_pe < 12: return 8, "Attractif ‚úÖ"
            elif trailing_pe < 16: return 7, "Correct üëç"
            elif trailing_pe < 20: return 6, "L√©g√®rement √©lev√© üìä"
            elif trailing_pe < 26: return 5, "√âlev√© üòê"
            elif trailing_pe < 34: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif trailing_pe < 45: return 3, "Excessif üî¥"
            else: return 1, "Extr√™mement excessif üíÄ"

        # --- General / autres secteurs ---
        else:
            if trailing_pe < 7: return 10, "Exceptionnel üíé"
            elif trailing_pe < 11: return 9, "Tr√®s attractif üöÄ"
            elif trailing_pe < 15: return 8, "Attractif ‚úÖ"
            elif trailing_pe < 20: return 7, "Correct üëç"
            elif trailing_pe < 25: return 6, "L√©g√®rement √©lev√© üìä"
            elif trailing_pe < 32: return 5, "√âlev√© üòê"
            elif trailing_pe < 42: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif trailing_pe < 55: return 3, "Excessif üî¥"
            else: return 1, "Extr√™mement excessif üíÄ"


    @staticmethod
    def interpret_price_to_book(pb, sector="General"):
        if pb is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        # --- Financial Services & Real Estate ---
        if sector_group in ["Financial Services", "Real Estate"]:
            if pb < 0.4: return 10, "Tr√®s sous-√©valu√© pour le secteur üíé"
            elif pb < 0.7: return 9, "Sous-√©valu√© üöÄ"
            elif pb < 0.95: return 8, "L√©g√®rement sous-√©valu√© ‚úÖ"
            elif pb < 1.2: return 7, "Correct pour une banque/REIT üëç"
            elif pb < 1.6: return 6, "L√©g√®rement √©lev√© üìä"
            elif pb < 2.2: return 5, "√âlev√© üòê"
            elif pb < 3.0: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif pb < 4.0: return 3, "Excessif üî¥"
            else: return 1, "Extr√™mement excessif üíÄ"

        # --- Technology ---
        elif sector_group == "Technology":
            if pb < 1.5: return 10, "Exceptionnel pour la tech üíé"
            elif pb < 3.0: return 9, "Tr√®s attractif üöÄ"
            elif pb < 5.0: return 8, "Attractif ‚úÖ"
            elif pb < 8.0: return 7, "Correct pour la croissance üëç"
            elif pb < 12.0: return 6, "L√©g√®rement √©lev√© üìä"
            elif pb < 18.0: return 5, "√âlev√© üòê"
            elif pb < 25.0: return 4, "Tr√®s √©lev√© ‚ö†Ô∏è"
            elif pb < 35.0: return 3, "Excessif üî¥"
            else: return 1, "Bullesque üíÄ"

        # --- General / autres secteurs ---
        else:
            if pb < 0.6: return 10, "Tr√®s sous-√©valu√© üíé"
            elif pb < 0.9: return 9, "Sous-√©valu√© üöÄ"
            elif pb < 1.2: return 8, "L√©g√®rement sous-√©valu√© ‚úÖ"
            elif pb < 1.6: return 7, "Bon rapport üëç"
            elif pb < 2.2: return 6, "Correct üìä"
            elif pb < 3.0: return 5, "L√©g√®rement √©lev√© üòê"
            elif pb < 4.0: return 4, "√âlev√© ‚ö†Ô∏è"
            elif pb < 6.0: return 3, "Tr√®s √©lev√© üî¥"
            elif pb < 10.0: return 2, "Excessif üíÄ"
            else: return 1, "Extr√™mement excessif üéØ"


    # --- Risque / Solidit√© financi√®re ---
    @staticmethod
    def interpret_beta(beta, sector="General"):
        if beta is None:
            return 4, "Donn√©es indisponibles"
            
        sector_group = Utils._get_sector_group(sector)
        # --- Technology & Consumer Cyclical ---
        if sector_group in ["Technology", "Consumer Cyclical"]:
            if beta < 0.6: return 10, "Tr√®s d√©fensif pour le secteur tech/cyclique üõ°Ô∏è"
            elif beta < 0.85: return 9, "D√©fensif ‚úÖ"
            elif beta < 1.1: return 8, "Volatilit√© mod√©r√©e üëç"
            elif beta < 1.3: return 7, "Typique du secteur üìä"
            elif beta < 1.6: return 6, "Volatilit√© √©lev√©e üòê"
            elif beta < 1.9: return 5, "Tr√®s volatile ‚ö†Ô∏è"
            elif beta < 2.3: return 4, "Extr√™mement volatile üî¥"
            else: return 2, "Sp√©culatif üíÄ"

        # --- Consumer Defensive & Utilities ---
        elif sector_group in ["Consumer Defensive", "Utilities"]:
            if beta < 0.3: return 10, "Tr√®s d√©fensif üíé"
            elif beta < 0.6: return 9, "D√©fensif üõ°Ô∏è"
            elif beta < 0.85: return 8, "L√©g√®rement d√©fensif ‚úÖ"
            elif beta < 1.05: return 7, "Neutre üëç"
            elif beta < 1.25: return 6, "L√©g√®rement volatil üìä"
            elif beta < 1.6: return 5, "Volatilit√© √©lev√©e üòê"
            elif beta < 2.0: return 4, "Tr√®s volatile ‚ö†Ô∏è"
            else: return 3, "Extr√™mement volatile üî¥"

        # --- General / autres secteurs ---
        else:
            if beta < 0.4: return 10, "Tr√®s faible volatilit√© üõ°Ô∏è"
            elif beta < 0.7: return 9, "Faible volatilit√© ‚úÖ"
            elif beta < 0.9: return 8, "L√©g√®rement d√©fensif üëç"
            elif beta < 1.1: return 7, "Similaire au march√© üìä"
            elif beta < 1.3: return 6, "L√©g√®rement volatil üòê"
            elif beta < 1.6: return 5, "Volatilit√© √©lev√©e ‚ö†Ô∏è"
            elif beta < 2.0: return 4, "Tr√®s volatile üî¥"
            elif beta < 2.5: return 3, "Extr√™mement volatile üíÄ"
            else: return 1, "Sp√©culatif extr√™me üé∞"


    @staticmethod
    def interpret_debt_to_equity(debt, sector="General"):
        if debt is None:
            return 3, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        if sector_group in ["Financial Services", "Real Estate"]:
            if debt < 100: return 10, "Endettement tr√®s faible üíé"
            elif debt < 200: return 9, "Endettement faible üöÄ"
            elif debt < 350: return 8, "Endettement mod√©r√© ‚úÖ"
            elif debt < 550: return 7, "Acceptable üëç"
            elif debt < 800: return 6, "L√©g√®rement √©lev√© üìä"
            elif debt < 1100: return 5, "√âlev√© üòê"
            elif debt < 1500: return 4, "Tr√®s endett√© ‚ö†Ô∏è"
            elif debt < 2000: return 3, "Endettement excessif üî¥"
            else: return 2, "Critique üíÄ"

        elif sector_group == "Utilities":
            if debt < 40: return 10, "Tr√®s faible endettement üíé"
            elif debt < 80: return 9, "Endettement faible üöÄ"
            elif debt < 130: return 8, "Endettement mod√©r√© ‚úÖ"
            elif debt < 200: return 7, "Acceptable üëç"
            elif debt < 280: return 6, "√âlev√© üìä"
            elif debt < 400: return 5, "Tr√®s endett√© üòê"
            elif debt < 600: return 4, "Endettement excessif ‚ö†Ô∏è"
            else: return 3, "Critique üî¥"

        elif sector_group == "Technology":
            if debt < 5: return 10, "Endettement quasi nul üíé"
            elif debt < 15: return 9, "Endettement faible üöÄ"
            elif debt < 30: return 8, "Endettement mod√©r√© ‚úÖ"
            elif debt < 60: return 7, "Acceptable üëç"
            elif debt < 100: return 6, "√âlev√© üìä"
            elif debt < 150: return 5, "Tr√®s endett√© üòê"
            elif debt < 220: return 4, "Endettement excessif ‚ö†Ô∏è"
            else: return 3, "Critique üî¥"

        else:  # General / autres secteurs
            if debt < 10: return 10, "Endettement tr√®s faible üíé"
            elif debt < 25: return 9, "Endettement faible üöÄ"
            elif debt < 50: return 8, "Endettement mod√©r√© ‚úÖ"
            elif debt < 80: return 7, "Acceptable üëç"
            elif debt < 120: return 6, "Moyen üìä"
            elif debt < 180: return 5, "√âlev√© üòê"
            elif debt < 250: return 4, "Tr√®s endett√© ‚ö†Ô∏è"
            elif debt < 350: return 3, "Endettement excessif üî¥"
            else: return 2, "Critique üíÄ"


    @staticmethod
    def interpret_current_ratio(cr, sector="General"):
        if cr is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        if sector_group == "Financial Services":
            if cr > 1.5: return 10, "Tr√®s forte liquidit√© üíé"
            elif cr > 1.2: return 9, "Forte liquidit√© üöÄ"
            elif cr > 1.0: return 8, "Bonne liquidit√© ‚úÖ"
            elif cr > 0.8: return 7, "Correcte üëç"
            elif cr > 0.6: return 6, "Acceptable üìä"
            elif cr > 0.4: return 5, "Faible üòê"
            elif cr > 0.3: return 4, "Probl√®me ‚ö†Ô∏è"
            else: return 3, "Critique üî¥"

        elif sector_group in ["Technology", "Healthcare"]:
            if cr > 4.0: return 10, "Liquidit√© tr√®s forte üíé"
            elif cr > 3.0: return 9, "Excellente üöÄ"
            elif cr > 2.0: return 8, "Bonne ‚úÖ"
            elif cr > 1.5: return 7, "Correcte üëç"
            elif cr > 1.2: return 6, "Acceptable üìä"
            elif cr > 1.0: return 5, "Faible üòê"
            elif cr > 0.8: return 4, "Probl√®me ‚ö†Ô∏è"
            else: return 3, "Critique üî¥"

        else:
            if cr > 3.5: return 10, "Tr√®s forte liquidit√© üíé"
            elif cr > 2.5: return 9, "Excellente üöÄ"
            elif cr > 1.8: return 8, "Bonne ‚úÖ"
            elif cr > 1.5: return 7, "Correcte üëç"
            elif cr > 1.2: return 6, "Acceptable üìä"
            elif cr > 1.0: return 5, "Faible üòê"
            elif cr > 0.8: return 4, "Probl√®me ‚ö†Ô∏è"
            elif cr > 0.6: return 3, "Grave probl√®me üíÄ"
            else: return 2, "Situation critique üö®"


    # --- Rentabilit√© / marges ---
    @staticmethod
    def interpret_profit_margin(marg, sector="General"):
        if marg is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)

        if sector_group == "Technology":
            if marg > 0.30: return 10, "Marge exceptionnelle üíé"
            elif marg > 0.22: return 9, "Tr√®s bonne marge üöÄ"
            elif marg > 0.15: return 8, "Bonne marge logicielle ‚úÖ"
            elif marg > 0.10: return 7, "Acceptable üëç"
            elif marg > 0.05: return 6, "Marge faible ‚ö†Ô∏è"
            elif marg > 0.02: return 4, "Marge tr√®s faible üî¥"
            return 1, "Pertes - mod√®le non rentable üö®"

        elif sector_group == "Healthcare":
            if marg > 0.25: return 10, "Marge exceptionnelle pharma üíé"
            elif marg > 0.18: return 9, "Excellente marge üöÄ"
            elif marg > 0.12: return 8, "Bonne marge ‚úÖ"
            elif marg > 0.08: return 7, "Correcte üëç"
            elif marg > 0.04: return 6, "Marge faible ‚ö†Ô∏è"
            elif marg > 0.01: return 4, "Marge tr√®s faible üî¥"
            return 1, "Pertes - R&D non amortie üö®"

        elif sector_group in ["Financial Services", "Energy"]:
            if marg > 0.35: return 10, "Marge exceptionnelle üíé"
            elif marg > 0.25: return 9, "Excellente marge üöÄ"
            elif marg > 0.18: return 8, "Tr√®s bonne marge ‚úÖ"
            elif marg > 0.12: return 7, "Bonne marge üëç"
            elif marg > 0.07: return 6, "Marge correcte üìä"
            elif marg > 0.03: return 4, "Marge faible ‚ö†Ô∏è"
            return 1, "Pertes üö®"

        else:  # General et autres secteurs
            if marg > 0.30: return 10, "Marge exceptionnelle üíé"
            elif marg > 0.22: return 9, "Tr√®s bonne marge üöÄ"
            elif marg > 0.15: return 8, "Bonne marge ‚úÖ"
            elif marg > 0.10: return 7, "Correcte üëç"
            elif marg > 0.06: return 6, "Marge moyenne ‚ö†Ô∏è"
            elif marg > 0.03: return 4, "Marge faible üî¥"
            elif marg > 0: return 3, "Marge tr√®s faible üíÄ"
            return 1, "Pertes üö®"


    @staticmethod
    def interpret_fcf_yield(fcf_yield, sector="General"):
        if fcf_yield is None:
            return 4, "Donn√©es indisponibles"

        sector_group = Utils._get_sector_group(sector)

        if sector_group in ["Technology", "Healthcare"]:
            if fcf_yield > 0.10: return 10, "Rendement exceptionnel üíé"
            elif fcf_yield > 0.07: return 9, "Tr√®s bon rendement üöÄ"
            elif fcf_yield > 0.05: return 8, "Bon rendement ‚úÖ"
            elif fcf_yield > 0.03: return 6, "Correct üëç"
            elif fcf_yield > 0.02: return 5, "Rendement faible ‚ö†Ô∏è"
            elif fcf_yield > 0.01: return 4, "Tr√®s faible üî¥"
            return 1, "Cash-flow n√©gatif üö®"

        elif sector_group == "Energy":
            if fcf_yield > 0.15: return 10, "Rendement exceptionnel üíé"
            elif fcf_yield > 0.10: return 9, "Tr√®s bon rendement üöÄ"
            elif fcf_yield > 0.07: return 8, "Bon rendement ‚úÖ"
            elif fcf_yield > 0.04: return 6, "Correct üëç"
            elif fcf_yield > 0.02: return 4, "Rendement faible ‚ö†Ô∏è"
            return 1, "Cash-flow n√©gatif üö®"

        else:  # General et autres secteurs
            if fcf_yield > 0.12: return 10, "Rendement exceptionnel üíé"
            elif fcf_yield > 0.08: return 9, "Tr√®s bon rendement üöÄ"
            elif fcf_yield > 0.06: return 8, "Bon rendement ‚úÖ"
            elif fcf_yield > 0.04: return 6, "Correct üëç"
            elif fcf_yield > 0.02: return 4, "Rendement faible ‚ö†Ô∏è"
            return 1, "Cash-flow n√©gatif üö®"

    @staticmethod
    def interpret_dividend_yield(div, sector="General"):
        if div is None:
            return 2, "Pas de dividende üö´"
        
        sector_group = Utils._get_sector_group(sector)
        
        if sector_group in ["Utilities", "Energy", "Real Estate"]:
            if div > 10: return 8, "Rendement tr√®s √©lev√© (risque de soutenabilit√©) ‚ö†Ô∏è"
            elif div > 7: return 9, "Rendement √©lev√© - typique du secteur üí∞"
            elif div > 5: return 8, "Bon rendement ‚úÖ"
            elif div > 4: return 7, "Rendement correct üëç"
            elif div > 3: return 6, "Rendement mod√©r√© üìä"
            elif div > 2: return 5, "Rendement modeste üòê"
            elif div > 1: return 4, "Rendement faible ‚¨áÔ∏è"
            elif div > 0: return 3, "Rendement symbolique üî¥"
            return 1, "Dividende nul - atypique üö´"

        elif sector_group in ["Technology", "Healthcare"]:
            if div > 4: return 8, "Rendement √©lev√© pour la croissance ‚ö†Ô∏è"
            elif div > 2.5: return 7, "Bon rendement - rare dans le secteur ‚úÖ"
            elif div > 1.5: return 6, "Rendement mod√©r√© üëç"
            elif div > 0.8: return 5, "Rendement symbolique üìä"
            elif div > 0.3: return 4, "Tr√®s faible üòê"
            elif div > 0: return 3, "Minimal ‚¨áÔ∏è"
            return 5, "Aucun dividende - normal pour la croissance üìà"

        else:  # General et autres secteurs
            if div > 8: return 10, "Rendement tr√®s √©lev√© (risque) ‚ö†Ô∏è"
            elif div > 6: return 9, "Rendement √©lev√© üí∞"
            elif div > 4.5: return 8, "Bon rendement ‚úÖ"
            elif div > 4: return 7, "Rendement correct üëç"
            elif div > 3: return 6, "Rendement mod√©r√© üìä"
            elif div > 2: return 5, "Rendement modeste üìä"
            elif div > 1: return 4, "Rendement faible üòê"
            elif div > 0.5: return 3, "Rendement tr√®s faible ‚¨áÔ∏è"
            elif div > 0: return 2, "Rendement symbolique üî¥"
            return 1, "Dividende nul üö´"

    @staticmethod
    def interpret_payout_ratio(payout, sector="General"):
        if payout is None:
            return 4, "Donn√©es indisponibles"
        
        sector_group = Utils._get_sector_group(sector)
        
        if sector_group in ["Utilities", "Real Estate"]:
            if 0.60 <= payout <= 0.80: return 10, "Distribution id√©ale pour le secteur üíé"
            elif 0.50 <= payout < 0.60: return 9, "Distribution √©quilibr√©e üöÄ"
            elif 0.80 < payout <= 0.95: return 8, "Distribution √©lev√©e mais acceptable ‚úÖ"
            elif payout > 0.95: return 4, "Distribution tr√®s √©lev√©e ‚ö†Ô∏è"
            elif 0.30 <= payout < 0.50: return 7, "Distribution conservatrice üëç"
            elif payout < 0.30: return 6, "Distribution faible üìä"
            else: return 5, "Hors normes üòê"

        elif sector_group in ["Technology", "Healthcare"]:
            if payout < 0.20: return 10, "Conservation des profits id√©ale pour la R&D üíé"
            elif payout < 0.35: return 9, "Distribution faible - bon pour la croissance üöÄ"
            elif payout < 0.50: return 8, "Distribution mod√©r√©e ‚úÖ"
            elif payout < 0.70: return 6, "Distribution √©lev√©e - limite pour la croissance üìä"
            elif payout >= 0.70: return 3, "Distribution tr√®s √©lev√©e - p√©nalise l'innovation ‚ö†Ô∏è"
            else: return 5, "Distribution nulle - normal üìà"

        else:  # General et autres secteurs
            if 0.25 <= payout <= 0.45: return 10, "Distribution id√©ale üíé"
            elif 0.45 < payout <= 0.60: return 8, "Distribution √©quilibr√©e ‚úÖ"
            elif 0.60 < payout <= 0.75: return 6, "Distribution √©lev√©e üìä"
            elif 0.75 < payout <= 0.90: return 3, "Distribution tr√®s √©lev√©e ‚ö†Ô∏è"
            elif payout > 0.90: return 1, "Non soutenable üö®"
            elif payout < 0.25: return 7, "Distribution conservatrice üëç"
            elif payout < 0.10: return 6, "Distribution faible üìä"
            return 5, "Distribution nulle üòê"

    # === Position 52 semaines ===
    @staticmethod
    def interpret_52w_position(current_price, low_52w, high_52w, sector="General"):
        if not (current_price and low_52w and high_52w) or high_52w == low_52w:
            return None, 5, "Donn√©es insuffisantes"

        position = (current_price - low_52w) / (high_52w - low_52w) * 100
        sector_group = Utils._get_sector_group(sector)

        if sector_group in ["Technology", "Healthcare"]:
            if position < 20: note, interp = 10, "Exceptionnellement proche du plus bas - opportunit√© croissance üíé"
            elif position < 35: note, interp = 9, "Tr√®s proche du plus bas üöÄ"
            elif position < 50: note, interp = 8, "Dans le bas du range ‚úÖ"
            elif position < 65: note, interp = 7, "L√©g√®rement sous la moyenne üëç"
            elif position < 75: note, interp = 6, "Proche de la moyenne üìä"
            elif position < 85: note, interp = 5, "L√©g√®rement au-dessus üòê"
            elif position < 92: note, interp = 4, "Dans le haut du range ‚ö†Ô∏è"
            elif position < 97: note, interp = 3, "Proche du plus haut üî¥"
            else: note, interp = 2, "Exceptionnellement proche du plus haut - sur√©valu√© üö®"

        elif sector_group in ["Energy", "Financial Services"]:
            if position < 15: note, interp = 10, "Exceptionnellement proche du plus bas - cycle favorable üíé"
            elif position < 25: note, interp = 9, "Tr√®s proche du plus bas üöÄ"
            elif position < 40: note, interp = 8, "Dans le bas du range ‚úÖ"
            elif position < 55: note, interp = 7, "L√©g√®rement sous la moyenne üëç"
            elif position < 65: note, interp = 6, "Proche de la moyenne üìä"
            elif position < 75: note, interp = 5, "L√©g√®rement au-dessus üòê"
            elif position < 85: note, interp = 4, "Dans le haut du range ‚ö†Ô∏è"
            elif position < 95: note, interp = 3, "Proche du plus haut üî¥"
            else: note, interp = 2, "Exceptionnellement proche du plus haut üö®"

        else:  # General et autres secteurs
            if position < 10: note, interp = 10, "Exceptionnellement proche du plus bas üíé"
            elif position < 20: note, interp = 9, "Tr√®s proche du plus bas üöÄ"
            elif position < 30: note, interp = 8, "Proche du plus bas ‚úÖ"
            elif position < 40: note, interp = 7, "Dans le bas du range üëç"
            elif position < 50: note, interp = 6, "L√©g√®rement sous la moyenne üìä"
            elif position < 60: note, interp = 5, "Proche de la moyenne üòê"
            elif position < 70: note, interp = 4, "L√©g√®rement au-dessus ‚ö†Ô∏è"
            elif position < 80: note, interp = 3, "Dans le haut du range üî¥"
            elif position < 90: note, interp = 2, "Proche du plus haut üíÄ"
            else: note, interp = 1, "Exceptionnellement proche du plus haut üö®"

        return position, note, interp

    @staticmethod
    def interpret_analyst_rating(rec_mean, num_analysts, sector="General"):
        if rec_mean is None:
            return "N/A", 3, "Donn√©es indisponibles"

        sector_group = Utils._get_sector_group(sector)
        
        # Base sur la note moyenne
        if rec_mean <= 1.2:
            note, base_interp = 10, "Achat fort exceptionnel üíé"
        elif rec_mean <= 1.5:
            note, base_interp = 9, "Achat fort üöÄ"
        elif rec_mean <= 1.7:
            note, base_interp = 8, "Achat fort üöÄ"
        elif rec_mean <= 2.0:
            note, base_interp = 7, "Achat ‚úÖ"
        elif rec_mean <= 2.5:
            note, base_interp = 6, "Achat mod√©r√© üëç"
        elif rec_mean <= 3.0:
            note, base_interp = 5, "Neutre positif üìä"
        elif rec_mean <= 3.3:
            note, base_interp = 4, "Neutre üòê"
        elif rec_mean <= 3.7:
            note, base_interp = 3, "Neutre n√©gatif ‚ö†Ô∏è"
        elif rec_mean <= 4.2:
            note, base_interp = 2, "Vente mod√©r√©e üî¥"
        elif rec_mean <= 4.5:
            note, base_interp = 1, "Vente üíÄ"
        else:
            note, base_interp = 0, "Vente forte üö®"

        # Ajustement selon le nombre d'analystes et le secteur
        if num_analysts < 2:
            note = max(1, note - 3)
            interp = f"{base_interp} ‚ö†Ô∏è Tr√®s peu d'avis ({num_analysts})"
        elif num_analysts < 4:
            note = max(1, note - 2)
            interp = f"{base_interp} ‚ö†Ô∏è Peu d'avis ({num_analysts})"
        elif num_analysts < 8:
            note = max(1, note - 1)
            interp = f"{base_interp} Avis limit√©s ({num_analysts})"
        elif num_analysts < 15:
            interp = f"{base_interp} ({num_analysts} analystes)"
        else:
            note = min(10, note + 1)
            interp = f"{base_interp} ‚úÖ Consensus fort ({num_analysts} analystes)"

        # Ajout du contexte sectoriel
        if sector_group in ["Technology", "Healthcare"] and note >= 7:
            interp += " - Soutien fort pour la croissance"
        elif sector_group in ["Financial Services", "Energy"] and note >= 7:
            interp += " - Confiance sectorielle"
        elif note <= 3 and sector_group in ["Consumer Defensive", "Utilities"]:
            interp += " - Inhabituel pour ce secteur d√©fensif"

        grade_str = f"{rec_mean:.1f}/5"
        return grade_str, note, interp